fasta_string = """
>1ail.pdb
MDSNTVSSFQVDCFLWHVRKQVVDQELGDAPFLDRLRRDQKSLRGRGSTLGLNIEAATHVGKQIVEKILK
>1cgo.pdb
FAKPEDAVKYRQSALTLMASHFGRMTPVVKGQAPYDAAQIKANVEVLKTLTALPWAAFGPGTEGGDARPEIWSDAASFKQKQQAFQDNIVKLSAAADAGDLDKLRAAFGDVGASCKACHDAYRK
>1coa.pdb
MKTEWPELVGKSVEEAKKVILQDKPEAQIIVLPVGTIVTMEYRIDRVRLFVDKLDNVAEVPRVG
>1cpr.pdb
ADTKEVLEAREAYFKSLGGSMKAMTGVAKAFDAEAAKVEAAKLEKILATDVAPLFPAGTSSTDLPGQTEAKAAIWANMDDFGAKGKAMHDAGGAVIAAANAGDGAAFGAALQKLGGTCKACHDDYREED
>1fup.pdb
RSEKDSMGAIDVPADKLWGAQTQRSLEHFRISTEKMPTSLIHALALTKRAAAKVNEDLGLLSEEKASAIRQAADEVLAGQHDDEFPLAIWQTGSGTQSNMNMNEVLANRASELLGGVRGMERKVHPNDDVNKSQSSNDVFPTAMHVAALLALRKQLIPQLKTLTQTLNEKSRAFADIVKIGRTHLQDATPLTLGQEISGWVAMLEHNLKHIEYSLPHVAELALGGTAVGTGLNTHPEYARRVADELAVITCAPFVTAPNKFEALATCDALVQAHGALKGLAASLMKIANDVRWLASGPRCGIGEISIPENEPGSSIMPGKVNPTQCEALTMLCCQVMGNDVAINMGGASGNFELNVFRPMVIHNFLQSVRLLADGMESFNKHCAVGIEPNRERINQLLNESLMLVTALNTHIGYDKAAEIAKKAHKEGLTLKAAALALGYLSEAEFDSWVRPEQM
>1h7c.pdb
PRVRQIKIKTGVVRRLVKERVMYEKEAKQQEEKIEKMRAEDGENYDIKKQAEILQESRMMIPDCQRRLEAAYLDLQRILENEKDLEEAEEYKEARLVLDSVKL
>1i5x.pdb
IVQQQNNLLRAIEAQQHLLQLTVWGIKQLQAASGGRGGWMEWDREINNYTSLIHSLIEESQ
>1j8b.pdb
LGGLMKQAQQMQEKMQKMQEEIAQLEVTGESGAGLVKITINGAHNCRRIDIDPSLMEDDKEMLEDLIAAAFNDAVRRAEELQKEKMASVTAG
>1jmw.pdb
MNQQGFVISNELRQQQSELTSTWDLMLQTRINLARSAARMMMDASNQQSSAKTDLLQNAKTTLAQAAAHYANFKNMTPLPAMAEASANVDEKYQRYQAALAELIQFLDNGNMDAYFAQPTQGMQNALGEALGNYARVSENLYRQTF
>1kfm.pdb
SNAKIDQLSSDVQTLNAKVDQLSNDVNAARSDAQAAKDDAARANQRLDNM
>1l3p.pdb
IPAGELQIIDKIDAAFKVAATAAATAPADDKFTVFEAAFNKAIKETTGGAYDTYKCIPSLEAAVKQAYAATVAAAPQVKYAVFEAALTKAITAMSEVQKVSQ
>1lih.pdb
MGGLLFSSLQHCQQGFVISNELRQQQSELTSTWDLMLQTRINLSRSAARMMMDASNQQSSAKTDLLQNAKTTLAQAAAHYANFKNMTPLPAMAEASANVDEKYQRYQAALAELIQFLDNGNMDAYFAQPTQGMQNALGEALGNYARVSENLYRQTFDQSA
>1mbc.pdb
VLSEGEWQLVLHVWAKVEADVAGHGQDILIRLFKSHPETLEKFDRFKHLKTEAEMKASEDLKKHGVTVLTALGAILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISEAIIHVLHSRHPGDFGADAQGAMNKALELFRKDIAAKYKELGYQG
>1o3x.pdb
AANKLIKEMVQEDQKRMEKISKRVNAIEEVNNNVKLLTEMVMSHSQGGAAAGSSEDLMKELYQRCERMRPTLFRLASDTEDNDEALAEILQANDNLTQVINLYKQLVRGEEV
>1paz.pdb
ENIEVHMLNKGAEGAMVFEPAYIKANPGDTVTFIPVDKGHNVESIKDMIPEGAEKFKSKINENYVLTVTQPGAYLVKCTPHYAMGMIALIAVGDSPANLDQIVSAKKPKIVQERLEKVIA
>1qr9.pdb
SGIVQQQNNLLRAIEAQQHLLQATVWGIKQLQARSGGRGGWMEWDREINNYTSLIHSLIEESQNQQEK
>1rop.pdb
MTKQEKTALNMARFIRSQTLTLLEKLNELDADEQADICESLHDHADELYRSCLARF
>1rpo.pdb
MTKQEKTALNMARFIRSQTLTLLEKLNELADAADEQADICESLHDHADELYRSCLARFGDD
>1tqg.pdb
GSHMEYLGVFVDETKEYLQNLNDTLLELEKNPEDMELINEAFRALHTLKGMAGTMGFSSMAKLCHTLENILDKARNSEIKITSDLLDKIFAGVDMITRMVDKIVS
>1vls.pdb
MNQQGFVISNELRQQQSELTSTWDLMLQTRINLSRSAARMMMDASNQQSSAKTDLLQNAKTTLAQAAAHYANFKNMTPLPAMAEASANVDEKYQRYQAALAELIQFLDNGNMDAYFAQPTQGMQNALGEALGNYARVSENLYRQTF
>1vxc.pdb
VLSEGEWQLVLHVWAKVEADVAGHGQDILIRLFKSHPETLEKFDRFKHLKTEAEMKASEDLKKHGVTVLTALGAILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISEAIIHVLHSRHPGDFGADAQGAMNKALELFRKDIAAKYKELGYQG
>1w8i.pdb
MAALIDTGIFFGFYSLKDVHHMDSVAIVVHAVEGKWGRLFVTNHILDETLTLLKYKKLPADKFLEGFVESGVLNIIYTDDEVERKALEVFKARVYEKGFSYTDAISEVVAEELKLKLISYDSRFSLPTIGRDYWKSLDESERKRISAILREKGID
>1wpa.pdb
WIREYPPITSDQQRQLYKRNFDTGLQEYKSLQSELDEINKELSRLDKELDDYREESEEYMAAADEYNRLKQVKGSADYKSKKNHCKQLKSKLSHIKKMVGDYDRQKT
>1yzm.pdb
GSPLLQQIHNITSFIRQAKAAGRMDEVRTLQENLRQLQDEYDQQQT
>2fup.pdb
MPDSPTLLDLFAEDIGHANQLLQLVDEEFQALERRELPVLQQLLGAKQPLMQQLERNGRARAEILREAGVSLDREGLARYARERADGAELLARGDELGELLERCQQANLRNGRIANQASTGSLLNILR
>2h36.pdb
KQDLEKIESDIINDWTEADDLDDALDFLFMEKVSEFKIKFKDPLKVTEEEYRELLGNYDSSNSVSSNGITIDQYTYDEDDDIMYKLEFTYRKEDNKIYIYEVQGWREK
>2hh6.pdb
MSFIEKMIGSLNDKREWKAMEARAKALPKEYHHAYKAIQKYMWTSGGPTDWQDTKRIFGGILDLFEEGAAEGKKVTDLTGEDVAAFCDELMKDTKTWMDKYRTKLNDSIGRD
>2hy6.pdb
VKQLADAVEELASANYHLANAVARLAKAVGE
>2iji.pdb
GTKQEKTALNMARHIRSQTLTLLEKLNELDADEQADICESLHDHADELYRSCLARF
>2ppx.pdb
MPRIKIIRRALKLTQEEFSARYHIPLGTLRDWEQGRSEPDQPARAYLKIIAVDPEGTAAALR
>2qqy.pdb
MSHDVKELIEGLNEDLAGEYSAIIMYNHNAATVSGIYRQVLKPFFESEISDEQGHALYLAEKIKTLGGTPTTIPLRVKQAEDVREMLEYARQSEYETIKRYEKRKEQAANLNMTELVVKLEDMIADETNHMEELDRLLN
>2qyw.pdb
MAASAASSEHFEKLHEIFRGLLEDLQGVPERLLGTAGTEEKKKLVRDFDEKQQEANETLAEMEEELRYAPLTFRNPMMSKLRNYRKDLAKLHREVR
>2uuh.pdb
HHHHHHKDEVALLAAVTLLGVLLQAYFSLQVISARRAFRVSPPLTTGPPEFERVYRAQVNCSEYFPLFLATLWVAGIFFHEGAAALCGLVYLFARLRYFQGYARSAQLRLAPLYASARALWLLVALAALGLLAHFLPAALRAALLGRLRTL
>2v4x.pdb
PVFENNNQRYYESLPFKQLKELKIACSQYGPTAPFTIAMIENLGTQALPPNDWKQTARACLSGGDYLLWKSEFFEQCARIADVNRQQGIQTSYEMLIGEGPYQATDTQLNFLPGAYAQISNAARQAWKRLP
>2wq1.pdb
RMKQLEDKIEENTSKIYHNTNEIARNTKLVGE
>2xle.pdb
FAKPEDAVKYRQSALTLMASHFGRMTPVVKGQAPYDAAQIKANVEVLKTLSALPWAAFGPGTEGGDARPEIWSDAASFKQKQQAFQDNIVKLSAAADAGDLDKLRAAFGDVGASCKACHDAYKKKK
>2z44.pdb
EFKKVAKETAITLQSYLTYQAVRLISQQLSETNPGQAIWLGEFSKRHPIQESDLYLEAMMLENKELVLRILTVRENLAEGVLEFLPEMVLSQIKQSNGNHRRSLLERLTQ
>2za8.pdb
YSTEVEAAVNRLVNLYLRASYTYLSLGFYFDRDDVALEGVCHFFRELAEEKREGAERLLKMQNQRGGRALFQDLQKPSQDEWGTTPDAMKAAIVLEKSLNQALLDLHALGSAQADPHLCDFLESHFLDEEVKLIKKMGDHLTNIQRLVGSQAGLGEYLFERLTLK
>3etw.pdb
AASLVGELQALDAEYQNLANQEEARFNEERAQADAARQALAQNEQVYNELSQRAQRLQAEANTRFYKSQYQELASKYEDALKKLEAEMEQQKAVISDFEKIQALRAGNL
>3g7c.pdb
EEWIREYPPITSDQQRQLYKRNFDTGLQEYKSLQSELDEINKELSRLDKELDDYREESEEYMAAADEYNRLKQVKGDADYKSKKNHCKQLKSKLSHIKKMVGDYDRQKT
>3h36.pdb
QVDADLQAEIVGKYNADLQKAVQIEEKKASEIATEAVKEHVTAEYEERYAEHEEHDRIMRDVAEILEQMEHAEVRRLI
>3l1m.pdb
ADLEDNMETLNDNLKVIEKADNAAQVKDALTKMRAAALDAQKATPPKLEDKSPDSPEMWDFRHGFDILVCQIDDALKLANEGKVKEAQAAAEQLKTTCNACHQKYR
>3lf9.pdb
MINEIKKDAQERMDKSVEALKNNLSKVRTGGGGTEERRKDLVKIVRGEAEGGRVAVRNIARDAANDLAALGKDKEVNWFDISQALWEIQKLTDVAVKKIDEVLAAKEKELMEVLEHHHHH
>3mxz.pdb
HMATIRNLKIKTSTCKRIVKELHSYEKEVEREAAKTADMKDKGADPYDLKQQENVLGESRMMIPDCHKRLESALADLKSTLAELEETEKEGPEIEDAKKTVADVEKQ
>3rmi.pdb
GSMMQEKILSELAYLRQSIDNFDITLIHILAERFRCTQAIGRLKARYNLPAVDPLREQYQIKRLRKLAIDTHFDPDFAEKFLKFIIKEVVHQHEVIAEKQKIKKE
""".strip()
qseqs = dict(zip(fasta_string.replace(">","").split('\n')[0::2],fasta_string.split('\n')[1::2]))



import os,sys
from Bio.Blast import NCBIWWW,NCBIXML
from Bio import Entrez,SeqIO
Entrez.email = "will@sheffler.me"


#help(NCBIWWW)
# result_handle = NCBIWWW.qblast("blastp", "pdb", fasta_string)
# 
# save_file = open("my_blast.xml", "w")
# save_file.write(result_handle.read())
# save_file.close()
# result_handle.close()
# sys.exit()
result_handle = open("my_blast.xml")

blast_records = list(NCBIXML.parse(result_handle))

print "num sequences:",len(blast_records)

for blast_record in blast_records:
	pid = os.path.split(blast_record.query)[1][:4].upper()
	print "                                   ",pid
	first = True
	for alignment in blast_record.alignments:		
		#print "fetching seq: '"+alignment.hit_id+"'"
		handle = Entrez.efetch(db="nucleotide", rettype="fasta", id=alignment.hit_id)
		seq_record = SeqIO.read(handle, "fasta")
		handle.close()
		hsp = alignment.hsps[0]		
		seq = seq_record.seq
		h,t = seq[:hsp.sbjct_start-1],seq[hsp.sbjct_end:]
		# if seq[0] != 'M': 
		# 	#print alignment.hit_id,"doesn't start with methionine"
		# 	continue
		e = hsp.expect
		if not first and e > 1e-50: break
		cont = "yes" if alignment.title.find('1VXC') != -1 else "no"
		#print "first hit for:",pid,"E:",e,"contains pdb id:",cont,"num HSP:",len(alignment.hsps)
		print "--------------------------------------------------------------------------------------------------------------"
		print pid," "*(len(h)-hsp.query_start+1)+qseqs[blast_record.query]
		print pid," "*len(h)+hsp.query
		print pid," "*len(h)+hsp.match
		print pid,h+hsp.sbjct+t
		print pid,seq_record.seq
		first = False
		if seq[0]=="M": break
